# -*- coding: utf-8 -*-
"""Dialogflow Farmbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X20c1u-s-4aPkZiMF2HiHMbRGAWwO9Td
"""

# FarmBot Dialogflow Fulfillment Webhook for Google Colab

# InIn C4In D3D3stall necessary libraries
# Flask for the web server, pyngrok to create a public URL for Colab
# You might need to restart the Colab runtime after installing ngrok the very first time.
!pip install Flask pyngrok

import os
from flask import Flask, request, jsonify
from pyngrok import ngrok
import json # For handling JSON data from Dialogflow

# --- Agricultural Knowledge Base ---
# This is your core data. In a real-world app, this would be a database.
# For a hackathon, an in-memory dictionary is perfectly fine.
FARMING_KNOWLEDGE_BASE = {
    "maize": {
        "disease": {
            "yellowing leaves": "Common causes for yellowing maize leaves include nitrogen deficiency, lack of water, or sometimes Maize Streak Virus. Check for other symptoms like stunted growth or streaks.",
            "stunted growth": "Stunted maize growth can be due to nutrient deficiencies (especially nitrogen, phosphorus), poor soil quality, or early onset of Maize Streak Virus. Ensure proper fertilization.",
            "rust": "Maize rust is a fungal disease causing orange-brown pustules on leaves. Use resistant varieties and consider fungicides if severe. Improve air circulation.",
        },
        "planting": {
            "general": "Maize is best planted at the onset of the rainy season. Ensure good soil drainage. Plant seeds 2-5 cm deep, with 25-30 cm spacing between plants and 75-90 cm between rows.",
            "niger state": "In Niger State, early maize can be planted from April to May, and late maize from July to August, depending on rainfall patterns.",
        },
        "fertilizer": {
            "general": "Maize requires adequate nitrogen (N), phosphorus (P), and potassium (K). A balanced NPK fertilizer (e.g., 20-10-10 or 15-15-15) is often recommended. Apply in split doses.",
            "nitrogen deficiency": "Yellowing leaves are a key sign of nitrogen deficiency. Apply urea or another nitrogen-rich fertilizer. Make sure it's dissolved and reaches the roots.",
        },
        "quality_assurance": {
            "harvest": "Harvest maize when the kernels are hard and dry, and the husks have turned brown. Dry thoroughly before storage to prevent mold.",
            "storage": "Store maize in cool, dry, well-ventilated areas. Use airtight containers or bags to prevent pest infestation. Consider natural pesticides like neem leaves."
        }
    },
    "tomato": {
        "disease": {
            "black spots": "Black spots on tomato leaves can indicate early blight or bacterial spot. Remove affected leaves and ensure good air circulation. Fungicides may be needed for blight.",
            "wilting": "Tomato wilting can be caused by bacterial wilt, fusarium wilt, or verticillium wilt. Check the stem for discoloration. Crop rotation and resistant varieties are important.",
            "blossom end rot": "This is not a disease but a calcium deficiency, appearing as black sunken spots on the bottom of the fruit. Ensure consistent watering and adequate soil calcium.",
        },
        "planting": {
            "general": "Tomatoes thrive in warm weather. Plant seedlings 60-90 cm apart in well-drained soil. Provide stakes or cages for support.",
        },
        "fertilizer": {
            "general": "Tomatoes need balanced nutrients, particularly phosphorus for flowering and fruiting. A fertilizer with higher P and K is good (e.g., 5-10-10). Avoid excessive nitrogen.",
        },
        "quality_assurance": {
            "harvest": "Harvest tomatoes when fully colored but still firm. Pick gently to avoid bruising.",
            "storage": "Store ripe tomatoes at room temperature away from direct sunlight. Refrigeration can reduce flavor but extend shelf life if needed for very ripe ones."
        }
    },
    "cassava": {
        "disease": {
            "wilted": "Cassava wilting can be a sign of Cassava Bacterial Blight. Look for angular spots on leaves and stem streaking. Use healthy planting materials.",
            "mosaic virus": "Cassava Mosaic Disease (CMD) causes yellowing and distortion of leaves. Use resistant varieties and remove infected plants immediately.",
        },
        "planting": {
            "general": "Cassava is propagated from stem cuttings. Plant cuttings at a 45-degree angle, with about two-thirds buried. Spacing typically 1m x 1m.",
            "season": "Best planted at the beginning of the rainy season to ensure good root development.",
        },
        "fertilizer": {
            "general": "Cassava needs potassium and phosphorus, and moderate nitrogen. A 10-10-20 NPK blend is often suitable. Apply during weeding cycles.",
            "pale leaves": "Pale cassava leaves can indicate nitrogen deficiency or poor soil. Apply nitrogen-rich fertilizer or compost.",
        },
        "quality_assurance": {
            "harvest": "Cassava can be harvested from 8-24 months after planting, depending on variety. Harvest by hand-pulling or using implements to avoid root damage.",
            "storage": "Fresh cassava roots spoil quickly. They can be stored for a few days in cool, humid conditions. Processing into garri or fufu extends shelf life significantly.",
        }
    },
    "yam": {
        "disease": {
            "rot": "Yam rot (e.g., yam anthracnose) can cause black lesions on leaves and stem, leading to tuber rot. Use healthy setts, practice good sanitation, and consider fungicides.",
            "swollen roots": "Unusual swelling or galls on yam roots might indicate nematode infestation. Crop rotation and resistant varieties help manage this.",
        },
        "planting": {
            "general": "Yams are planted using 'setts' (pieces of tuber). Plant 10-15 cm deep in mounds or ridges, typically 1m x 1m apart. Staking is often required for support.",
            "season": "Planting generally occurs at the beginning of the rainy season (March-April in many parts of Nigeria).",
        },
        "fertilizer": {
            "general": "Yams respond well to organic matter and balanced NPK fertilizer. Potassium is particularly important for tuber development. Apply in split doses.",
        },
        "quality_assurance": {
            "harvest": "Harvest yams when leaves start to yellow and dry, typically 7-11 months after planting. Dig carefully to avoid bruising tubers.",
            "storage": "Yams store well in cool, dry, well-ventilated barns, away from direct sunlight. Avoid stacking to prevent rot. Regular inspection for spoilage is key."
        }
    },
    "rice": {
        "disease": {
            "stunted": "Stunted rice seedlings can be due to nutrient deficiency, rice yellow mottle virus, or pest damage (e.g., stem borers). Check for other symptoms.",
            "blast": "Rice blast is a fungal disease causing diamond-shaped lesions on leaves, stems, and panicles. Use resistant varieties, proper fertilization, and fungicides if severe.",
        },
        "planting": {
            "general": "Rice can be transplanted or direct-seeded. Ensure proper water management. Spacing for transplanted rice is typically 20x20 cm.",
            "nigeria": "Wet season rice is typically planted April-May. Dry season rice (with irrigation) can be planted from November-December.",
        },
        "fertilizer": {
            "general": "Rice needs significant nitrogen, phosphorus, and potassium. Nitrogen is crucial for tillering and grain filling. Split applications of urea are common.",
            "urea": "Urea is a common nitrogen source for rice, promoting vegetative growth. Apply in two or three split doses during the growing cycle.",
        },
        "quality_assurance": {
            "harvest": "Harvest rice when 80-85% of the grains are straw-colored. Avoid over-ripening to prevent shattering losses.",
            "storage": "Dry paddy rice to 12-14% moisture content before storage. Store in clean, dry, rodent-proof containers or bags. Aeration is important."
        }
    }
}

app = Flask(__name__)

# --- Ngrok Setup ---
# You need an ngrok auth token to use ngrok for more than a very short time.
# Get one from https://ngrok.com/signup and replace "YOUR_NGROK_AUTH_TOKEN"
# You can also set it as a Colab secret for better security.
# NGROK_AUTH_TOKEN = "YOUR_NGROK_AUTH_TOKEN" # <<< IMPORTANT: Replace this!

# Set ngrok auth token if provided
# if NGROK_AUTH_TOKEN and NGROK_AUTH_TOKEN != "YOUR_NGROK_AUTH_TOKEN":
#     ngrok.set_auth_token(NGROK_AUTH_TOKEN)
# else:
#     print("WARNING: ngrok auth token not set. Your tunnel might expire quickly or not work.")
#     print("Get your token from https://ngrok.com/signup and replace 'YOUR_NGROK_AUTH_TOKEN' in the code.")


# --- Webhook Endpoint ---
@app.route('/webhook', methods=['POST'])
def webhook():
    req = request.get_json(silent=True, force=True)
    intent_name = req.get('queryResult', {}).get('intent', {}).get('displayName')
    parameters = req.get('queryResult', {}).get('parameters', {})

    print(f"Received intent: {intent_name}")
    print(f"Received parameters: {parameters}")

    response_text = "I'm sorry, I couldn't find information for that. Can you rephrase?"

    try:
        if intent_name == 'AskDiseaseSymptom':
            crop_type = parameters.get('crop_type', '').lower()
            symptom = parameters.get('symptom', '').lower()
            response_text = get_disease_symptom_info(crop_type, symptom)
        elif intent_name == 'AskPlantingAdvice':
            crop_type = parameters.get('crop_type', '').lower()
            location = parameters.get('location', '').lower()
            response_text = get_planting_advice_info(crop_type, location)
        elif intent_name == 'AskFertilizerAdvice':
            crop_type = parameters.get('crop_type', '').lower()
            symptom = parameters.get('symptom', '').lower()
            problem_area = parameters.get('problem_area', '').lower()
            fertilizer_type = parameters.get('fertilizer_type', '').lower()
            response_text = get_fertilizer_advice_info(crop_type, symptom, problem_area, fertilizer_type)
        elif intent_name == 'AskQualityAssurance':
            crop_type = parameters.get('crop_type', '').lower()
            response_text = get_quality_assurance_info(crop_type)
        # For other intents like Welcome, Goodbye, ThankYou, Dialogflow handles them directly
        # and doesn't call the webhook unless explicitly enabled for them without parameters.

    except Exception as e:
        print(f"Error processing webhook: {e}")
        response_text = "An error occurred while trying to get information. Please try again."

    # Dialogflow expects a specific JSON response format
    return jsonify({
        "fulfillmentText": response_text,
        "fulfillmentMessages": [
            {
                "text": {
                    "text": [response_text]
                }
            }
        ]
    })

# --- Knowledge Base Lookup Functions ---
def get_disease_symptom_info(crop_type, symptom):
    crop_info = FARMING_KNOWLEDGE_BASE.get(crop_type)
    if crop_info and "disease" in crop_info:
        disease_info = crop_info["disease"].get(symptom)
        if disease_info:
            return f"For {crop_type} with {symptom}: {disease_info}"
        else:
            return f"I have information for {crop_type}, but not specifically for '{symptom}'. Can you describe it differently or check for other common issues?"
    return f"I don't have detailed disease information for {crop_type} yet. Please try another crop or symptom."

def get_planting_advice_info(crop_type, location):
    crop_info = FARMING_KNOWLEDGE_BASE.get(crop_type)
    if crop_info and "planting" in crop_info:
        if location:
            planting_info = crop_info["planting"].get(location)
            if planting_info:
                return f"For {crop_type} in {location}: {planting_info}"
            else:
                general_info = crop_info["planting"].get("general")
                if general_info:
                    return f"I don't have specific planting advice for {crop_type} in {location}, but generally: {general_info}"
                else:
                    return f"I don't have specific planting advice for {crop_type}."
        else:
            general_info = crop_info["planting"].get("general")
            if general_info:
                return f"For {crop_type}, general planting advice: {general_info}"
            else:
                return f"I don't have specific planting advice for {crop_type}."
    return f"I don't have specific planting advice for {crop_type} yet. Please try another crop."

def get_fertilizer_advice_info(crop_type, symptom, problem_area, fertilizer_type):
    crop_info = FARMING_KNOWLEDGE_BASE.get(crop_type)
    if crop_info and "fertilizer" in crop_info:
        if symptom:
            fert_info = crop_info["fertilizer"].get(f"{symptom} deficiency") # Assuming symptom is about deficiency
            if fert_info:
                return f"For {crop_type} with {symptom}: {fert_info}"
            else:
                return f"I have general fertilizer advice for {crop_type}: {crop_info['fertilizer'].get('general', 'No specific advice found.')}"
        elif fertilizer_type:
            fert_info = crop_info["fertilizer"].get(fertilizer_type)
            if fert_info:
                return f"For {crop_type} using {fertilizer_type}: {fert_info}"
            else:
                return f"I have general fertilizer advice for {crop_type}: {crop_info['fertilizer'].get('general', 'No specific advice found.')}"
        elif problem_area:
            fert_info = crop_info["fertilizer"].get(problem_area)
            if fert_info:
                return f"For {crop_type} with a {problem_area} issue: {fert_info}"
            else:
                return f"I have general fertilizer advice for {crop_type}: {crop_info['fertilizer'].get('general', 'No specific advice found.')}"
        else:
            general_info = crop_info["fertilizer"].get("general")
            if general_info:
                return f"For {crop_type}, general fertilizer advice: {general_info}"
            else:
                return f"I don't have specific fertilizer advice for {crop_type}."
    return f"I don't have specific fertilizer advice for {crop_type} yet."

def get_quality_assurance_info(crop_type):
    crop_info = FARMING_KNOWLEDGE_BASE.get(crop_type)
    if crop_info and "quality_assurance" in crop_info:
        harvest_info = crop_info["quality_assurance"].get("harvest", "No specific harvest tips found.")
        storage_info = crop_info["quality_assurance"].get("storage", "No specific storage tips found.")
        return f"For {crop_type}:\nHarvesting Tips: {harvest_info}\nStorage Tips: {storage_info}"
    return f"I don't have specific quality assurance tips for {crop_type} yet."


# --- Run Flask App with ngrok ---
# This part starts the Flask server and exposes it via ngrok.
# It needs to be run in a Colab cell.
if __name__ == '__main__':
    port = 5000 # You can choose any available port
    public_url = ngrok.connect(port)
    print(f"Ngrok tunnel URL: {public_url}")
    print(f"Flask app running on http://localhost:{port}")
    # IMPORTANT: Keep this cell running! The Flask app will stop if the cell execution finishes.
    app.run(port=port, debug=False, use_reloader=False)

!ngrok config add-authtoken 30Eah2aVnwtDrAa4P4rMErrtxyI_2kAh8PzZk7XLZsRGgD6gA

!pip freeze > requirements.txt